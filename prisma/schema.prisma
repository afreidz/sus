generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Client {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  name      String   @unique @db.VarChar(255)
  systems   System[]
}

model System {
  id        String     @id @default(nanoid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  createdBy String
  title     String     @db.VarChar(255)
  clientId  String
  revisions Revision[]
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, title])
}

model Revision {
  id          String       @id @default(nanoid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String
  title       String       @db.VarChar(255)
  systemId    String
  system      System       @relation(fields: [systemId], references: [id], onDelete: Cascade)
  surveys     Survey[]
  respondents Respondent[]
  responses   Response[]

  @@unique([systemId, title])
}

model Survey {
  id               String                 @id @default(nanoid())
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  createdBy        String
  label            String                 @unique @db.VarChar(255)
  revisions        Revision[]
  scoreTypeId      String?
  scoreType        ScoreType?             @relation(fields: [scoreTypeId], references: [id])
  respondents      Respondent[]
  questions        Question[]
  responseOrdering CurratedResponseOrder?
  questionOrdering SurveyQuestionOrder?
  Response         Response[]
}

model Question {
  id                String             @id @default(nanoid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdBy         String
  text              String
  positive          Boolean            @default(true)
  media             Bytes?
  mediaMIME         String?
  group             String?
  responses         Response[]
  curratedResponses CurratedResponse[]
  surveys           Survey[]
}

model SurveyQuestionOrder {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  order     String[]
  surveyId  String   @unique
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model CurratedResponseOrder {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  order     String[]
  surveyId  String   @unique
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model ScoreType {
  id               String             @id @default(nanoid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        String
  type             String
  CurratedResponse CurratedResponse[]
  surveys          Survey[]
}

model CurratedResponse {
  id             String     @id @default(nanoid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String
  label          String
  value          String
  numericalValue Int?
  scoreTypeId    String?
  scoreType      ScoreType? @relation(fields: [scoreTypeId], references: [id], onDelete: Cascade)
  responses      Response[]
  questions      Question[]
}

model Respondent {
  id         String     @id @default(nanoid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdBy  String
  email      String
  complete   Boolean    @default(false)
  surveyId   String
  survey     Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  revisionId String
  revision   Revision   @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  responses  Response[]

  @@unique([email, revisionId, surveyId])
}

model Response {
  id                 String            @id @default(nanoid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          String
  freeformResponse   String?
  curratedResponseId String?
  curratedResponse   CurratedResponse? @relation(fields: [curratedResponseId], references: [id])
  respondentId       String
  respondent         Respondent        @relation(fields: [respondentId], references: [id], onDelete: Cascade)
  revisionId         String
  revision           Revision          @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  questionId         String
  question           Question          @relation(fields: [questionId], references: [id])
  surveyId           String?
  survey             Survey?           @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([respondentId, revisionId, questionId])
}
