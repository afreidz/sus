---
import api from "@/helpers/api";
import PrivateLayout from "@/layouts/private.astro";
import SystemRevisionNav from "@/components/private/SystemRevisionNav.svelte";
import SystemRevisionContent from "@/components/private/SystemRevision.svelte";

const id = Astro.params.id as string;
const system = await api({
  method: "GET",
  endpoint: "systemId",
  base: Astro.url.origin,
  headers: Astro.request.headers,
  substitutions: { systemId: id },
});

const gap = 0.5;
const rad = 45;
const thickness = 6;

function circumference(rad: number) {
  return 2 * Math.PI * rad;
}

const score1 = 0.86;
const score2 = 0.02;
---

<PrivateLayout class="flex-1 flex flex-col items-center">
  <div class="text-sm breadcrumbs w-full text-left px-8 py-4 mb-4">
    <ul>
      <li><a href="/clients">Clients</a></li>
      <li><a href={`/clients/${system.client.id}`}>{system.client.name}</a></li>
      <li class="font-semibold">{system.title}</li>
    </ul>
  </div>
  <div class="p-4">
    <SystemRevisionNav {system} client:load />
    {
      system.revisions.map((revision) => (
        <SystemRevisionContent {revision} client:load />
      ))
    }
  </div>
  <div>
    <svg class="h-64 rotate-180" viewBox="0 0 100 50">
      <g>
        <circle
          r={rad}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${circumference(rad) / 2}, ${circumference(rad)}`}
          class="stroke-sus-primary-20"
          stroke-width={thickness}></circle>
        <circle
          r={rad}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${score1 * (circumference(rad) / 2)}, ${circumference(rad)}`}
          class="stroke-sus-primary-40/60"
          stroke-width={thickness}></circle>
      </g>
      <g>
        <circle
          r={rad - (thickness + gap)}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${circumference(rad - (thickness + gap)) / 2}, ${circumference(rad - (thickness + gap))}`}
          class="stroke-sus-primary-20"
          stroke-width={thickness}></circle>
        <circle
          r={rad - (thickness + gap)}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${score1 * (circumference(rad - (thickness + gap)) / 2)}, ${circumference(rad - (thickness + gap))}`}
          class="stroke-sus-positive-30"
          stroke-width={thickness}></circle>
        <circle
          r={rad - (thickness + gap)}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${score2 * (circumference(rad - (thickness + gap)) / 2)}, ${circumference(rad - (thickness + gap))}`}
          class="stroke-sus-primary-40"
          stroke-width={thickness}></circle>
      </g>
      <g>
        <circle
          r={rad - (thickness + gap) * 2}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${circumference(rad - (thickness + gap) * 2) / 2}, ${circumference(rad - (thickness + gap) * 2)}`}
          class="stroke-sus-primary-20"
          stroke-width={thickness}></circle>
        <circle
          r={rad - (thickness + gap) * 2}
          cx="50%"
          cy="0%"
          fill="none"
          stroke-dasharray={`${0.5 * (circumference(rad - (thickness + gap) * 2) / 2)}, ${circumference(rad - (thickness + gap) * 2)}`}
          class="stroke-sus-primary-60"
          stroke-width={thickness}></circle>
      </g>
    </svg>
  </div>
</PrivateLayout>
